default:
  image: python:3.12

stages:
  - lint
  - test
  - publish
  - release

flake8:
  stage: lint
  script:
    - pip install poetry
    - poetry install --no-root
    - poetry run flake8 .
  only:
    - merge_requests
    - main

black:
  stage: lint
  script:
    - pip install poetry
    - poetry install --no-root 
    - poetry run black --check .
  only:
    - merge_requests
    - main

pylint:
  stage: lint
  script:
    - pip install poetry
    - poetry install --no-root 
    - poetry run pylint src tests
  only:
    - merge_requests
    - main

isort:
  stage: lint
  script:
    - pip install poetry
    - poetry install --no-root 
    - poetry run isort src tests --check-only
  only:
    - merge_requests
    - main

tests:
  stage: test
  script:
    - pip install poetry
    - poetry install
    - poetry run pytest --junitxml=junitreport.xml
  artifacts:
    when: always
    reports:
      junit: junitreport.xml
  only:
    - merge_requests
    - main

coverage:
  stage: test
  dependencies:
    - tests
  script:
    - pip install poetry
    - poetry install
    - >
      poetry run pytest
      --cov=src
      --cov-report=term
      --cov-report=html:coverage
      --cov-report=xml:coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - "coverage/*"
  only:
    - merge_requests
    - main

publish-package-tag:
  stage: publish
  dependencies:
    - tests
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ "/^v((?P<major>0|[1-9]\d*)(\.(?P<minor>0|[1-9]\d*)(\.(?P<patch>0|[1-9]\d*))?)?)$/"'
      when: always
  script:
    - pip install poetry
    - poetry build
    - poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
    - poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
    - poetry publish --repository gitlab

pages:
  stage: publish
  dependencies:
    - coverage
  script:
    - ls coverage/
    - mv coverage/ public/
  artifacts:
    name: public
    paths:
      - public
  only:
    - main

release-on-tag:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - publish-package-tag
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ "/^v((?P<major>0|[1-9]\d*)(\.(?P<minor>0|[1-9]\d*)(\.(?P<patch>0|[1-9]\d*))?)?)$/"'
      when: always
  script:
    - echo "running release-on-tag"
  release:
    name: "$CI_PROJECT_NAME $CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    description: "$CI_COMMIT_TAG"
